######################################################

######################################################
############Created by Devesh Kumar###################
#############devesh1102@gmail.com####################
######################################################
 
######################################################
 
 
 
import sys 
import heapq 
import copy
import math
import decimal
input = sys.stdin.readline
# import sys.stdout.flush as flush
# from decimal import *
#heapq.heapify(li) 
#
#heapq.heappush(li,4) 
#
#heapq.heappop(li)
#
# &    Bitwise AND Operator    10 & 7 = 2
# |    Bitwise OR Operator    10 | 7 = 15
# ^    Bitwise XOR Operator    10 ^ 7 = 13
 
# <<    Bitwise Left Shift operator    10<<2 = 40
# >>    Bitwise Right Shift Operator
# '''############ ---- Input Functions ---- #######Start#####'''
# n = 100
# parent = [-1 for i in range(n)]
# def find(a):
#     if parent[a] == a:
#         return a
#     else:
#         parent[a] = find(parent[a])
    
# def union(a,b):
 
 
 
def binary_exponentiation(a,b):#a^b
    ans = 1
    while(b!=0):
        bit = b%2
        if bit == 1:
            ans =ans*a
        a = a*a
        b = b//2
    return ans
    # print(lsp )
def inp():
    return(int(input()))
def inlt(): 
    return(list(map(int,input().split())))
def insr():
    s = input()
    return(list(s[:len(s) - 1]))
def insr2():
    s = input()
    s = list(s[:len(s) - 1])
    s = [ord(s[i]) - ord("a") for i in range(len(s))]
    return s
def invr():
    return(map(int,input().split()))
############ ---- Input Functions ---- #######End
# #####   
 
 
ans = 0
def pr_list(a):
    print( *a , sep=" ")
 
def swap(a,b):
    temp = a
    a = b
    b = temp
    return [ a,b]
    # return [b,a]
def pri(a,b):
    s = "? " + str(a) + " " + str(b)
    print(s)
    sys.stdout.flush()
result = []
def nCk(arr,itr,k,n):
    if len(arr)  == k:
        result.append(arr)
        return
    if len(arr)>k or itr == n+1:
        return
    nCk(arr + [itr],itr+1,k,n)
    nCk(arr,itr+1,k,n)
    return
def nPk(arr,itr,k,n):
    if len(arr) ==k:
        result.append(arr)
        return
    if len(arr)>k or itr == n+1:
        return
    for i in range(len(arr)+1):
        nPk(arr[0:i] + [itr] + arr[i: len(arr)],itr+1,k,n)
    nPk(arr,itr+1,k,n)
    return
def main():
    tests   =  inp()
    # tests = 1
    # mod =  998244353
    mod = 1000000007
    limit = 10**18
    ans = 0
    stack = []
    arr = []
    heapq.heapify(arr) 
    # print(dp)
    # print(dp)
    for test in range(tests):
        n = inp()
        s  = insr()
        prefix = []
        lenght = 1
        for i in range(1,n):
            if s[i] == s[i-1]:
                lenght = lenght +1
            else:
                prefix.append(lenght)
                lenght = 1
        prefix.append(lenght)
        kill = -1
        result = 0
        r = 0
        while(True):
            if r == kill:
                r= r + 1
            while(r < len(prefix) and  prefix[r] == 1):
                r=r + 1
            if r== len(prefix):
                result = result + math.ceil((len(prefix) - 1 - kill)/2)
                break
            
            prefix[r] = prefix[r] - 1
            result  = result + 1
            kill = kill + 1
            # print(kill,r,result)
        print(result)


                

        
 
 
if __name__== "__main__":
    main()
# return least index x such that A[x] > target, or len(A) if no such index exists 